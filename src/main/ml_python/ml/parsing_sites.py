import requests
from openai import OpenAI

def get_html(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.text
    except requests.exceptions.RequestException as e:
        print(f"Ошибка при получении страницы: {e}")
        return None

def parser(url_request):
    client = OpenAI(
        base_url="https://openrouter.ai/api/v1",
        api_key="YOUR_KEY",
    )

    completion = client.chat.completions.create(
        extra_headers={
        },
        extra_body={},
        model="deepseek/deepseek-chat-v3-0324:free",
        messages=[
            {
                "role": "user",
                "content":"""
                Ты должен проанализировать следующий HTML-код страницы и извлечь только статьи или новости, которые могут быть полезны для проекта. Игнорируй ненужную информацию, такую как рекламные блоки, меню, футеры и другие нерелевантные части.
        Ты парсер новостей.Тебе нужно извлечь последние 10 новостей или статей с веб-страницы,игнорируя рекламу, не относящиеся к теме материалы или неконтентные элементы,Не нужно парсить всю страницу — только актуальные новости.
        1. Прочти и извлеки только последние 10 актуальных новостей/статей с сайта,не включая рекламу, боковые панели или не относящиеся к теме статьи.
        2. Убедись, что текст каждой новости является полноценным и структурированным
        3. Верни результаты в виде списка с заголовками, а далее текст статьи на 400-500 слов
        Дай мне список последних новостей с html кода, ничего лишнего
        Нужен строгий формат разделения статей. НИКАКОГО ВВОДНОГО ТЕКСТА только парсинг.
        Вот структура:
        текст статьи на 400-500 слов или меньше, смотря какая длина.  дальше идет q1w2e3r4t5y6u7i8o9@@#!@
        ссылка на статью откуда текст, дальше идет q1w2e3r4t5y6u7i8o9@@#!@
        конец
        Если статей не будет вообще только строго напиши: не нашел статей
        вот html код:
        """ + get_html(url_request)
            }
        ]
    )
    return completion.choices[0].message.content
